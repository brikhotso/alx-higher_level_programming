"""
Test cases for the `100-matrix_mul` module.

Using `matrix_mul` function
==========================

Importing function from the module:
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

# Test cases for valid input scenarios

Valid matrices multiplication:
>>> matrix_a = [[1, 2], [3, 4]]
>>> matrix_b = [[5, 6], [7, 8]]
>>> matrix_mul(matrix_a, matrix_b)
[[19, 22], [43, 50]]

Valid result with negative numbers:
>>> matrix_a = [[-1, -2], [-3, -4]]
>>> matrix_b = [[-5, -6], [-7, -8]]
>>> matrix_mul(matrix_a, matrix_b)
[[19, 22], [43, 50]]

# Test cases for invalid input scenarios

Non-numeric elements in matrices:
>>> matrix_a = [[1, 2], ['a', 4]]
>>> matrix_b = [[5, 6], [7, 8]]
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
TypeError: m_a should contain only integers or floats

Empty matrix:
>>> matrix_a = [[]]
>>> matrix_b = [[5, 6], [7, 8]]
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

Matrices of different sizes:
>>> matrix_a = [[1, 2, 3], [4, 5, 6]]
>>> matrix_b = [[7, 8], [9, 10]]
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied

Matrices that cannot be multiplied:
>>> matrix_a = [[1, 2, 3], [4, 5, 6]]
>>> matrix_b = [[7, 8]]
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied

Missing two arguments
>>> matrix_mul()
Traceback (most recent call last):
    ...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Missing one argument
>>> matrix_a = [[1, 2], [3, 4]]
>>> matrix_mul(matrix_a)
Traceback (most recent call last):
    ...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

# Additional Test cases for invalid input scenarios

# m_a is a String and m_b is a List of lists of numbers
>>> matrix_a = "Invalid"
>>> matrix_b = [[5, 6], [7, 8]]
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

m_a is a List of lists of numbers and m_b is a String
>>> matrix_a = [[1, 2], [3, 4]]
>>> matrix_b = "Invalid"
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

m_a is a List of integers and m_b is a List of lists of numbers
>>> matrix_a = [1, 2, 3]
>>> matrix_b = [[5, 6], [7, 8]]
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
TypeError: m_a must be a list of lists

m_a is a List of lists of numbers and m_b is a List of integers
>>> matrix_a = [[1, 2], [3, 4]]
>>> matrix_b = [5, 6]
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
TypeError: m_b must be a list of lists

m_a is a List of lists of numbers and m_b is an Empty List
>>> matrix_a = [[1, 2], [3, 4]]
>>> matrix_b = []
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty

m_a is a List of lists of numbers and m_b is a List of lists of not numbers
>>> matrix_a = [[1, 2], [3, 4]]
>>> matrix_b = [['a', 'b'], [1, 2]]
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
TypeError: m_b should contain only integers or floats

m_a is a List of lists of numbers with various sizes and m_b is a List of lists of numbers
>>> matrix_a = [[1, 2], [3, 4, 5]]
>>> matrix_b = [[1, 2], [3, 4]]
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
TypeError: each row of m_a must be of the same size

m_a is a List of lists of numbers and m_b is a List of lists of numbers with various sizes
>>> matrix_a = [[1, 2], [3, 4]]
>>> matrix_b = [[1, 2, 3], [4, 5]]
>>> matrix_mul(matrix_a, matrix_b)
Traceback (most recent call last):
    ...
TypeError: each row of m_b must be of the same size

"""
